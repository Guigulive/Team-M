pragma solidity ^0.4.14;

import './SafeMath.sol';
import './Ownable.sol';

contract payRoll is Ownable {
    using SafeMath for uint;
    struct Employee{
        address id;
        uint salary;
        uint lastPayday;
    }
    uint constant payDuration = 10 seconds;
    uint totalSalary;
    address owner;
    mapping(address => Employee) public employees;
 
  
    modifier employeeExist(address employeeId){
        var employee = employees[employeeId];  
        assert(employee.id != 0x0);
        _;
    }
    
    
    function _partialPaid(Employee employee) private {
        uint payment =employee.salary*(now - employee.lastPayday)/payDuration;
        employee.id.transfer(payment);
    }
    
    function addEmployee(address employeeId,uint salary) onlyOwner {
        
        var employee = employees[employeeId];        
        assert(employee.id == 0x0);
       
        totalSalary += salary * 1 ether;
        employees[employeeId] = Employee(employeeId,salary*1 ether,now);
    }
    
    function removeEmployee(address employeeId) onlyOwner employeeExist(employeeId) {
        var employee = employees[employeeId];  

        _partialPaid(employee);
        totalSalary -= employees[employeeId].salary;
        delete employees[employeeId];
    }
    function changePaymentAddress(address oldaddress, address newaddress) onlyOwner employExist(oldaddress) {
        uint salary = employees[oldaddress].salary;
        removeEmployee(oldaddress);
        addEmployee(newaddress, salary.div(1 ether));
        
    } 
    
    function updateEmployee(address employeeId,uint salary) onlyOwner employeeExist(employeeId) {
        
        var employee = employees[employeeId];  
      
        
        _partialPaid(employee);
        totalSalary -= employees[employeeId].salary;
        employees[employeeId].salary = salary *1 ether;
        totalSalary = employees[employeeId].salary;
        employees[employeeId].lastPayday = now;
    }
    
    
   function addFund() payable returns(uint){
       return this.balance;
   }
   
   function caculateRunway() returns(uint){
       return this.balance/totalSalary;
   } 
   
   function hasEnoughFund() returns(bool){
       return caculateRunway()>0;
   }
   
 
   function getPaid() employeeExist(msg.sender) {
       
        var employee = employees[msg.sender];
        
        uint nextPayday = employee.lastPayday + payDuration;
        assert(nextPayday<now);
        employees[msg.sender].lastPayday = nextPayday;
        employee.id.transfer(employee.salary);
        
   }
}
